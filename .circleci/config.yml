version: 2.1


orbs:
  aws-ecr: circleci/aws-ecr@8.1.3


jobs:
  integration:
    docker:
      - image: circleci/python:3.8

    steps:
      - checkout

      - run:
          name: Lint code
          command: echo "Linting repository"

      - run:
          name: Run unit tests
          command: echo "Running unit tests"



  build_and_push_image:
    jobs:
      - aws-ecr/build-and-push-image:
          context: aws-dev
          create-repo: true
          dockerfile: Dockerfile
          path: .
          repo: circleci-ecr-demo
          tag: "$CIRCLE_SHA1"
          build_args:
            - PINECONE_API_KEY1=$PINECONE_API_KEY
            - GEMINI_API_KEY1=$GEMINI_API_KEY

  # build-and-push-ecr-image:
  #   docker:
  #     - image: circleci/python:3.9

  #   steps:
  #     - checkout

  #     - run:
  #         name: Install AWS CLI and Docker
  #         command: |
  #           sudo apt-get update && sudo apt-get install -y \
  #             awscli \
  #             docker.io
            
  #           sudo systemctl start docker

  #     - run:
  #         name: Configure AWS credentials
  #         command: |
  #           aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
  #           aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
  #           aws configure set region $AWS_REGION

  #     - run:
  #         name: Login to Amazon ECR
  #         command: aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ECR_LOGIN_URI/$ECR_REPOSITORY_NAME

  #     - run:
  #         name: Build, tag, and push image to Amazon ECR
  #         command: |
  #           sudo systemctl status docker

  #           sudo systemctl start docker

  #           docker build -t $AWS_ECR_LOGIN_URI/$ECR_REPOSITORY_NAME:latest .
  #           docker push $AWS_ECR_LOGIN_URI/$ECR_REPOSITORY_NAME:latest


  # build-and-push-ecr-image:
  #   docker:
  #     - image: circleci/python:3.8

  #   steps:
  #     - checkout

  #     - run:
  #         name: Install Utilities
  #         command: |
  #           curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
  #           unzip awscliv2.zip
  #           sudo ./aws/install
  #           sudo apt-get update
  #           sudo apt-get install -y jq unzip
  #           curl -fsSL https://get.docker.com -o get-docker.sh

  #           sudo sh get-docker.sh
  #           sudo apt-get install -y dbus-user-session
  #           sudo service --status-all 
  #           sudo service docker start
  #     - run:
  #         name: Configure AWS credentials
  #         command: |
  #           aws --version
  #           mkdir ~/.aws
  #           echo -e "[default]\naws_access_key_id = $AWS_ACCESS_KEY_ID\naws_secret_access_key = $AWS_SECRET_ACCESS_KEY\nregion = $AWS_REGION" > ~/.aws/credentials

  #     - run:
  #         name: Login to Amazon ECR
  #         command: aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ECR_LOGIN_URI/$ECR_REPOSITORY_NAME

  #     - run:
  #         name: Build, tag, and push image to Amazon ECR
  #         command: |
  #           docker build -t $AWS_ECR_LOGIN_URI/$ECR_REPOSITORY_NAME:latest .
  #           docker push $AWS_ECR_LOGIN_URI/$ECR_REPOSITORY_NAME:latest

  Continuous-Deployment:
    docker:
      - image: circleci/python:3.8

    steps:
      - checkout

      - run:
          name: Configure AWS credentials
          command: |
            mkdir ~/.aws
            echo -e "[default]\naws_access_key_id = $AWS_ACCESS_KEY_ID\naws_secret_access_key = $AWS_SECRET_ACCESS_KEY\nregion = $AWS_REGION" > ~/.aws/credentials

      - run:
          name: Login to Amazon ECR
          command: aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ECR_LOGIN_URI/$ECR_REPOSITORY_NAME

      - run:
          name: Pull latest images
          command: docker pull $AWS_ECR_LOGIN_URI/$ECR_REPOSITORY_NAME:latest

      - run:
          name: Run Docker Image to serve users
          command: |
            docker run -d -p 8501:8501 --name=ai-research-assistant -e 'AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID' -e 'AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY' -e 'AWS_REGION=$AWS_REGION' $AWS_ECR_LOGIN_URI/$ECR_REPOSITORY_NAME:latest

      - run:
          name: Clean previous images and containers
          command: docker system prune -f

workflows:
  deploy-to-ec2:
    jobs:
      - integration
      - build-and-push-ecr-image:
          requires:
            - integration
            
      - Continuous-Deployment:
          requires:
            - build-and-push-ecr-image